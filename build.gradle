/**
 * This is the best Gradle in anarchy
 *
 * @author bush, perry
 */
//file:noinspection GroovyAssignabilityCheck I don't like warnings!!!!
//file:noinspection GroovyUnusedAssignment I don't like warnings!!!!
buildscript {
    repositories {
        // The mavenCentral() alias means that dependencies are fetched from the central Maven 2 repository (https://repo1.maven.org/maven2).
        mavenCentral()

        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }

        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        // Latest 2 version of ForgeGradle will update to 5.1.26 later. Versions list: https://maven.minecraftforge.net/net/minecraftforge/gradle/ForgeGradle/maven-metadata.xml
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        // Upgrade to 0.7-SNAPSHOT when upgrading ForgeGradle to 3.0+ & mixin ver at dependencies has to be 0.8+ for upgrading mixingradle ver. https://github.com/SpongePowered/MixinGradle
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
// Gradle plugin for all Minecraft mod development needs.
apply plugin: 'net.minecraftforge.gradle'
// Gradle plugin. Mixin is a trait/mixin & bytecode weaving framework for Java using ASM.
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds & enables the necessary things for Forge to be setup.

// The jar version number that will be output when building.
version = modversion
// https://maven.apache.org/guides/mini/guide-naming-conventions.html
group = modgroup
// The jar name that will be output when building.
archivesBaseName = modid

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    // This ensures that the generated class files will be compatible with JVMs specified by targetCompatibility.
    sourceCompatibility = targetCompatibility = '1.8'
    // Makes it so u don't need to convert unicode to basic latin for it to be able to build/run.
    options.encoding 'UTF-8'
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'cope.cosmos.asm.MixinLoader'
            property 'mixin.env.disableRefMap', 'true'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    // The url to get the spongepowered dependencies from.
    maven { url 'https://repo.spongepowered.org/maven' }
    // The url to get GitHub repositories from
    maven { url 'https://jitpack.io' }
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'swt-repo'
        url = "https://maven-eclipse.github.io/maven"
    }
    mavenCentral()
}

configurations {
    // Adds a reference so that we extend/add on to it with depends so we can grab them and compile them into the jar.
    embed
    // Grabs what's extended/added on from/to embed and compiles it into the jar when being built.
    compile.extendsFrom embed
}

configurations {
    jarLibs
    all {
        resolutionStrategy {
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core' // we want to exclude this as well because 0.7.11 includes it too new for MC
    }

    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }

    jarLibs('org.reflections:reflections:0.9.12') {
        exclude module: 'gson'
        exclude module: 'guava'
    }

    jarLibs('club.minnced:java-discord-rpc:2.0.2') {
        exclude module: 'jna'
    }


    // File reader.
    jarLibs('com.moandjiezana.toml:toml4j:0.7.2')

    // Microsoft Authentication
    embed 'com.github.litarvan:OpenAuth:1.1.2'

    compileOnly 'org.jetbrains:annotations:20.1.0'

    implementation configurations.jarLibs
}

mixin {
    defaultObfuscationEnv 'searge' // Types of obf env: searge, notch.
    sourceSets {
        main {
            ext.refMap = 'mixins.cosmos.refmap.json'
        }
    }
}

processResources {
    inputs.property 'version', project.version

    exclude '**/rawimagefiles'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version
    }
}

jar {
    manifest.attributes(
            'Manifest-Version': 1.0,
            'MixinConfigs': 'mixins.cosmos.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLCorePlugin': 'cope.cosmos.asm.MixinLoader',
            'ForceLoadAsMod': 'true',
            'Main-Class': 'cope.cosmos.client.Cosmos'
    )

    from {
        configurations.jarLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}